TODO 10-08-2010
- logzilla should also use logger, branch away and hack
- or at least write away to file
- show dave logzilla in his own implementation
  - request dave to pull
- test whether Dave's implementation also writes to gmail nicely
- repair FIXME with Dave Hansen (top priority)
  - FIXME, don't allow directory unlinking...
  - FIXME, using time for ino is a bad idea...
  - FIXME, we should probably make a mkfs command to make the root inode...
- persuade dave to refactor log_entry with @log_entry decorator
  - refactor own code
  - refactor Dave's code
  - send patch
- persuade dave to rename functions to lowercase initials where that is not the case
  - send patch
- eliminate thread deadlock in own implementation
  + investigate whether extra identation in getsem (get semaphore) has anything to do with it
  => no it doesn't, it's related to some nasty behaviour of some global lock, related to a FIXME
  - figure out what dirty forks and clean forks have to do with it,
  - figure out when a thread is through eating (for the moment) :P
- refactor: when a function is invoked it announces itself with log_entry, refactor this away with a decorator @log_entry
- when semget is called, the lock must be released, check for consistency
- refactor idea: think about how semget and release can be refactored to a decorator
+ remove quadratic string concatenation in cpython branch
  - test dave hansen's unoptimized string concatenations vs. my optimized concatenations
- enumerate useless branches
  => use gitk --all & to check on the branching
- destroy useless branches
+ refactor original code in cpython; submit to owner (Dave Hansen)
  + eliminate obvious bugs

MOSCOW
M
- refactor threads (to what?)
- add more tests
  - /etc/fuse.conf test for 'user_allow_other'
- change certain range to xrange (check where used in for loop but not as iterator for values)
S
- refactor to seperate gmail behaviour policy; basic imap to fuse translation
  * define policy code
  * define baseline behaviour code
- refactor to python style of coding; prod owner for pull
  - add decorators
  - add generators if need be, although bad for envisioned pypy
  - reduce reliance on system threads
  - more test code using decorators (use logger function)
    => decide what it should do first...
  - write more native python code
- redo logging functions to reflect python way with decorators and * and **  
  - rethink
  - redesign with decorators
  - implement
C
- refactor to pypy code (with jit)
  - import imaplib (pure cpython)
  - import python-fuse (need cpython wrapper for C lib probably)
  - probably need to rewrite system threads
+ figure out possible conflict, regexp in imaplib, probably not supported in pypy
  => pypy has regexp support, although basic, probably good enough for imaplib
  - test hypothesis pypy good enough
- speed test (pypy-jit vs. cpython)
- refactor to pypy-stackless code
  - remove threads, introduce green threads
  - refactor to asynch sockets using green threads (possible?)
W
- refactor gmail specific code to support any ol' imap service on any server
  - introduce concept of policy and behaviour
  => gmail sets its own policies as any other service provider
  => but they all have a baseline behaviour as far as IMAP goes
  - figure out what are these baseline behaviours
  - redesign
  - refactor
- write sikuli script to create test accounts on gmail
  
